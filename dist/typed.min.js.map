{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","typed.min.js","src/typed.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","typed","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","properties","object","prop","has","defineProperty","name","type","value","validate","getValidator","Object","enumerable","configurable","get","set","val","constructor","valueType","getConstructorType","getType","error","getFunctionName","obj","toString","slice","nativeTypes","fn","match","functionNameRe","expected","actual","TypeError","hasOwnProperty","Array","Boolean","Date","Function","Number","RegExp","String"],"mappings":";CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,MAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCEA,YC8BA,SAASS,GAAMiB,GACX,GAAMC,KACN,KAAK,GAAMC,KAAQF,GACXG,EAAIN,KAAKG,EAAYE,IACrBE,EAAeH,EAAQC,EAAMF,EAAWE,GAGhD,OAAOD,GAYX,QAASG,GAAeH,EAAQI,EAAMC,GAClC,GAAIC,GAAA,OACEC,EAAWC,EAAaJ,EAAMC,EACpCI,QAAON,eAAeH,EAAQI,GAC1BM,YAAY,EACZC,cAAc,EACdC,IAHgC,WAI5B,MAAON,IAEXO,IANgC,SAM5BC,GACIP,EAASO,KACTR,EAAQQ,MAcxB,QAASN,GAAaP,EAAMc,GACxB,GAAIC,GAAA,OACEX,EAAOY,EAAmBF,EAEhC,OAAIV,GACO,SAAwBC,GAK3B,MAJAU,GAAYE,EAAQZ,GAChBU,IAAcX,GACdc,EAAMlB,EAAMI,EAAMW,IAEf,GAIR,SAA6BV,GAIhC,MAHMA,aAAiBS,IACnBI,EAAMlB,EAAMmB,EAAgBL,GAAcG,EAAQZ,KAE/C,GAYf,QAASY,GAAQG,GACb,MAAOC,GAAS1B,KAAKyB,GAAKE,MAAM,MAWpC,QAASN,GAAmBF,GACxB,IAAK,GAAMV,KAAQmB,GACf,GAAItB,EAAIN,KAAK4B,EAAanB,IAClBU,IAAgBS,EAAYnB,GAC5B,MAAOA,EAInB,OAAO,MAWX,QAASe,GAAgBK,GACrB,MAAOA,GAAGrB,MAAQqB,EAAGH,WAAWI,MAAMC,GAAgB,IAAM,YAchE,QAASR,GAAMlB,EAAM2B,EAAUC,GAC3B,KAAM,IAAIC,WAAJ,gCAC8B7B,EAD9B,gBACkD2B,EADlD,aACuEC,GDtJjFpB,OAAON,eAAe9B,EAAS,cAC3BiC,OAAO,GCFX,IAAMJ,MAAS6B,eACTT,KAAcA,SACdK,EAAiB,qBACjBH,GACFQ,MAAAA,MACAC,QAAAA,QACAC,KAAAA,KACAC,SAAAA,SACAC,OAAAA,OACA3B,OAAAA,OACA4B,OAAAA,OACAC,OAAAA,ODwJJjE,GAAAA,WCLeS,EDMfR,EAAOD,QAAUA,EAAQ,qBAEd,IAAI","file":"typed.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! typed v2.0.0 | https://github.com/ryanmorr/typed */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.typed = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\r\n * Common variables\r\n */\nvar has = {}.hasOwnProperty;\nvar toString = {}.toString;\nvar functionNameRe = /function\\s+([^(]+)/;\nvar nativeTypes = {\n    Array: Array,\n    Boolean: Boolean,\n    Date: Date,\n    Function: Function,\n    Number: Number,\n    Object: Object,\n    RegExp: RegExp,\n    String: String\n};\n\n/**\r\n * Takes an object literal that maps\r\n * properties to constructors to\r\n * establish the type\r\n *\r\n * Example:\r\n *\r\n * typed({\r\n *   foo: String\r\n * });\r\n *\r\n * @param {Object} properties\r\n * @return {Object}\r\n * @api public\r\n */\nfunction typed(properties) {\n    var object = {};\n    for (var prop in properties) {\n        if (has.call(properties, prop)) {\n            defineProperty(object, prop, properties[prop]);\n        }\n    }\n    return object;\n}\n\n/**\r\n * Define a property on an object literal\r\n * that enforces the provided type\r\n *\r\n * @param {Object} object\r\n * @param {String} name\r\n * @param {Function} type\r\n * @api private\r\n */\nfunction defineProperty(object, name, type) {\n    var value = void 0;\n    var validate = getValidator(name, type);\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        configurable: true,\n        get: function get() {\n            return value;\n        },\n        set: function set(val) {\n            if (validate(val)) {\n                value = val;\n            }\n        }\n    });\n}\n\n/**\r\n * Get a function capable of validating\r\n * any values assigned to the property\r\n *\r\n * @param {String} prop\r\n * @param {Function} constructor\r\n * @api private\r\n */\nfunction getValidator(prop, constructor) {\n    var valueType = void 0;\n    var type = getConstructorType(constructor);\n    // Validate native instances\n    if (type) {\n        return function validateNative(value) {\n            valueType = getType(value);\n            if (valueType !== type) {\n                error(prop, type, valueType);\n            }\n            return true;\n        };\n    }\n    // Validate user-defined constructor instances\n    return function validateUserDefined(value) {\n        if (!(value instanceof constructor)) {\n            error(prop, getFunctionName(constructor), getType(value));\n        }\n        return true;\n    };\n}\n\n/**\r\n * Get the internal [[Class]] property\r\n * of an object to resolve its type\r\n *\r\n * @param {*} obj\r\n * @return {String}\r\n * @api private\r\n */\nfunction getType(obj) {\n    return toString.call(obj).slice(8, -1);\n}\n\n/**\r\n * Get the string name for a native\r\n * constructor\r\n *\r\n * @param {Function} constructor\r\n * @return {String}\r\n * @api private\r\n */\nfunction getConstructorType(constructor) {\n    for (var type in nativeTypes) {\n        if (has.call(nativeTypes, type)) {\n            if (constructor === nativeTypes[type]) {\n                return type;\n            }\n        }\n    }\n    return null;\n}\n\n/**\r\n * Get the name of a user defined\r\n * constructor function\r\n *\r\n * @param {Function} fn\r\n * @return {String}\r\n * @api private\r\n */\nfunction getFunctionName(fn) {\n    return fn.name || fn.toString().match(functionNameRe)[1] || 'anonymous';\n}\n\n/**\r\n * Throw an error for an invalid\r\n * value assignment after a property\r\n * is assigned a value of the wrong\r\n * type\r\n *\r\n * @param {String} prop\r\n * @param {String} expected\r\n * @param {String} actual\r\n * @api private\r\n */\nfunction error(prop, expected, actual) {\n    throw new TypeError('Invalid value assignment on \"' + prop + '\", expected: ' + expected + ', actual: ' + actual);\n}\n\n/**\r\n * Export `typed`\r\n */\nexports.default = typed;\nmodule.exports = exports['default'];\n\n},{}]},{},[1])(1)\n});\n\n","/**\r\n * Common variables\r\n */\r\nconst has = {}.hasOwnProperty;\r\nconst toString = {}.toString;\r\nconst functionNameRe = /function\\s+([^(]+)/;\r\nconst nativeTypes = {\r\n    Array,\r\n    Boolean,\r\n    Date,\r\n    Function,\r\n    Number,\r\n    Object,\r\n    RegExp,\r\n    String\r\n};\r\n\r\n/**\r\n * Takes an object literal that maps\r\n * properties to constructors to\r\n * establish the type\r\n *\r\n * Example:\r\n *\r\n * typed({\r\n *   foo: String\r\n * });\r\n *\r\n * @param {Object} properties\r\n * @return {Object}\r\n * @api public\r\n */\r\nfunction typed(properties) {\r\n    const object = {};\r\n    for (const prop in properties) {\r\n        if (has.call(properties, prop)) {\r\n            defineProperty(object, prop, properties[prop]);\r\n        }\r\n    }\r\n    return object;\r\n}\r\n\r\n/**\r\n * Define a property on an object literal\r\n * that enforces the provided type\r\n *\r\n * @param {Object} object\r\n * @param {String} name\r\n * @param {Function} type\r\n * @api private\r\n */\r\nfunction defineProperty(object, name, type) {\r\n    let value;\r\n    const validate = getValidator(name, type);\r\n    Object.defineProperty(object, name, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n            return value;\r\n        },\r\n        set(val) {\r\n            if (validate(val)) {\r\n                value = val;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get a function capable of validating\r\n * any values assigned to the property\r\n *\r\n * @param {String} prop\r\n * @param {Function} constructor\r\n * @api private\r\n */\r\nfunction getValidator(prop, constructor) {\r\n    let valueType;\r\n    const type = getConstructorType(constructor);\r\n    // Validate native instances\r\n    if (type) {\r\n        return function validateNative(value) {\r\n            valueType = getType(value);\r\n            if (valueType !== type) {\r\n                error(prop, type, valueType);\r\n            }\r\n            return true;\r\n        };\r\n    }\r\n    // Validate user-defined constructor instances\r\n    return function validateUserDefined(value) {\r\n        if (!(value instanceof constructor)) {\r\n            error(prop, getFunctionName(constructor), getType(value));\r\n        }\r\n        return true;\r\n    };\r\n}\r\n\r\n/**\r\n * Get the internal [[Class]] property\r\n * of an object to resolve its type\r\n *\r\n * @param {*} obj\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction getType(obj) {\r\n    return toString.call(obj).slice(8, -1);\r\n}\r\n\r\n/**\r\n * Get the string name for a native\r\n * constructor\r\n *\r\n * @param {Function} constructor\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction getConstructorType(constructor) {\r\n    for (const type in nativeTypes) {\r\n        if (has.call(nativeTypes, type)) {\r\n            if (constructor === nativeTypes[type]) {\r\n                return type;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Get the name of a user defined\r\n * constructor function\r\n *\r\n * @param {Function} fn\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction getFunctionName(fn) {\r\n    return fn.name || fn.toString().match(functionNameRe)[1] || 'anonymous';\r\n}\r\n\r\n/**\r\n * Throw an error for an invalid\r\n * value assignment after a property\r\n * is assigned a value of the wrong\r\n * type\r\n *\r\n * @param {String} prop\r\n * @param {String} expected\r\n * @param {String} actual\r\n * @api private\r\n */\r\nfunction error(prop, expected, actual) {\r\n    throw new TypeError(\r\n        `Invalid value assignment on \"${prop}\", expected: ${expected}, actual: ${actual}`\r\n    );\r\n}\r\n\r\n/**\r\n * Export `typed`\r\n */\r\nexport default typed;\r\n"],"sourceRoot":"/source/"}